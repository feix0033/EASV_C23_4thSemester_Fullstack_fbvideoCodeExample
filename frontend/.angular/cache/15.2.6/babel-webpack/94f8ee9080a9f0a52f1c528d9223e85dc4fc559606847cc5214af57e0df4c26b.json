{"ast":null,"code":"import { FireService } from \"./fire.service\"; // invoking the FireService class from fire.service file to use the FireService Object.\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./fire.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction AppComponent_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"json\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const m_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, m_r1), \"\\n\");\n  }\n}\n/**\n * This is the decorator with '@' will connect the component class to html and css,\n * \"selector\" is point the which tag from uplevel html can use this component\n * \"templateUrl\" will point which html file connect this component\n * \"styleUrls\" will point which css files connnect this component\n  */\n/**\n * The main part of component can contain the component variables and constructor and methods.\n */\nexport class AppComponent {\n  /**\n   * component constructor using dependency injection to use all the method from service.\n   * in here because the service use singleton pattern for Service, so in stack there only one instance.\n   * therefore we have to use dependency injection to invoke this instance.\n   *\n   * we don't actually call any method right here from the service. we just inject multiple service to make the angular\n   * parameter form html file can use those injected service's method.\n   *\n   * @param fireService\n   */\n  constructor(fireService) {\n    this.fireService = fireService;\n    this.title = 'frontend';\n    this.FireService = FireService;\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.FireService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 8,\n  vars: 2,\n  consts: [[\"type\", \"module\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Hello Welcome\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"input\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_2_listener($event) {\n        return ctx.sendThisMessage = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_3_listener() {\n        return ctx.fireService.sendMessage(ctx.sendThisMessage);\n      });\n      i0.ɵɵtext(4, \"Send Message\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, AppComponent_p_5_Template, 3, 3, \"p\", 2);\n      i0.ɵɵelementStart(6, \"button\");\n      i0.ɵɵtext(7, \"send message\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.sendThisMessage);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.fireService.message);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAMA,SAASA,WAAW,QAAQ,gBAAgB,CAAC,CAAC;;;;;;;ICc9CC,yBAAyC;IAQvCA,YACF;;IAAAA,iBAAI;;;;IADFA,eACF;IADEA,4DACF;;;ADrBA;;;;;;AAYA;;;AAGA,OAAM,MAAOC,YAAY;EAGvB;;;;;;;;;;EAUAC,YAAmBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAZ9B,UAAK,GAAG,UAAU;IAgBC,gBAAW,GAAGJ,WAAW;EAH5C;;AAdWE,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAG;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCvBzBR,0BAAI;MAAAA,6BAAa;MAAAA,iBAAK;MAStBA,gCAAmD;MAA9BA;QAAA;MAAA,EAA6B;MAAlDA,iBAAmD;MAMnDA,iCAA2D;MAAnDA;QAAA,OAASS,gDAAwC;MAAA,EAAC;MAACT,4BAAY;MAAAA,iBAAS;MAKhFA,yDASI;MAEJA,8BAAQ;MAAAA,4BAAY;MAAAA,iBAAS;;;MAtBRA,eAA6B;MAA7BA,6CAA6B;MAWjCA,eAAsB;MAAtBA,iDAAsB","names":["FireService","i0","AppComponent","constructor","fireService","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/evens/projectCode/EASV.4thSemester/EASV.4thSemester.Fullstack/fbvideo/frontend/src/app/app.component.ts","/Users/evens/projectCode/EASV.4thSemester/EASV.4thSemester.Fullstack/fbvideo/frontend/src/app/app.component.html"],"sourcesContent":["/**\n * This is app component file which contain the component method.\n * It can simply call the method from service to connect to backend or cloud.\n */\n\nimport { Component } from '@angular/core'; // invoking Component class from the angular core library to make the component class working.\nimport { FireService } from \"./fire.service\"; // invoking the FireService class from fire.service file to use the FireService Object.\n\n/**\n * This is the decorator with '@' will connect the component class to html and css,\n * \"selector\" is point the which tag from uplevel html can use this component\n * \"templateUrl\" will point which html file connect this component\n * \"styleUrls\" will point which css files connnect this component\n  */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n\n/**\n * The main part of component can contain the component variables and constructor and methods.\n */\nexport class AppComponent {\n  title = 'frontend';\n  sendThisMessage: any;\n  /**\n   * component constructor using dependency injection to use all the method from service.\n   * in here because the service use singleton pattern for Service, so in stack there only one instance.\n   * therefore we have to use dependency injection to invoke this instance.\n   *\n   * we don't actually call any method right here from the service. we just inject multiple service to make the angular\n   * parameter form html file can use those injected service's method.\n   *\n   * @param fireService\n   */\n  constructor(public fireService: FireService) {\n  }\n\n\n  protected readonly FireService = FireService;\n}\n","<h1>Hello Welcome</h1>\n\n<!--\nthis is the input tag will create a inputfield\nthe type should be module so angular module can be reconized this tag\n\n[(ngModel)] is for angular can get the input and save it as a varible.\nquotation mark use for point the varible which the [(ngModel)] should write in.\n-->\n<input type=\"module\" [(ngModel)]=\"sendThisMessage\">\n\n<!--\nthis is the button tag which can be click.\n(click) is an even or action trigger. when it happen then it will call the method.\n-->\n<button (click)=\"fireService.sendMessage(sendThisMessage)\">Send Message</button>\n\n<!-- this method use for show all the message was get-->\n<!-- *ngFor is loop statement from angular to integrate all the data from array-->\n<!-- let <variable> of <array> should be include in a quotation mark means take each element from array and put them into variable.-->\n<p *ngFor=\"let m of fireService.message\">\n  <!--\n  curly brackets means double binding a variable which come from component ts file\n  and tag's angular attribute.\n  when the variable be change even form angular attribute or the html field.\n  it will automatically changed at same time.\n  -->\n  <!--  the pipline with json means transmit the variable datatype to json format-->\n  {{m | json}}\n</p>\n\n<button>send message</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}