{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport * as config from '../../firebaseconfig.js';\nimport * as i0 from \"@angular/core\";\nexport let FireService = /*#__PURE__*/(() => {\n  class FireService {\n    // here will get/send data from firestore\n    // it need a messageDTO to transmit to json file\n    // it also need as array to contain the data read from firestore\n    constructor() {\n      this.message = [];\n      this.firebaseApplication = firebase.initializeApp(config.firebaseConfig);\n      this.firestore = firebase.firestore();\n      this.getMessage();\n    }\n    sendMessage(sendThisMessage) {\n      let messageDTO = {\n        messageContent: sendThisMessage,\n        timestamp: new Date(),\n        user: 'John Duo'\n      };\n      this.firestore.collection('initCollection').add(messageDTO);\n    }\n    getMessage() {\n      this.firestore.collection('initCollection').onSnapshot(snapshot => {\n        snapshot.docChanges().forEach(change => {\n          if (change.type == \"added\") {\n            this.message.push({\n              id: change.doc.id,\n              data: change.doc.data()\n            });\n          }\n          if (change.type == 'modified') {\n            const index = this.message.findIndex(document => document.id != change.doc.id);\n            this.message[index] = {\n              id: change.doc.id,\n              data: change.doc.data()\n            };\n          }\n          if (change.type == 'removed') {\n            this.message = this.message.filter(m => m.id != change.doc.id);\n          }\n        });\n      });\n    }\n  }\n  FireService.ɵfac = function FireService_Factory(t) {\n    return new (t || FireService)();\n  };\n  FireService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FireService,\n    factory: FireService.ɵfac,\n    providedIn: 'root'\n  });\n  return FireService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}