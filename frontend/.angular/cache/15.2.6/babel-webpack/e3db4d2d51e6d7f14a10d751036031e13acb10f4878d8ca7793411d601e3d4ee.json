{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport * as config from '../../firebaseconfig.js';\nimport * as i0 from \"@angular/core\";\n/**\n * here is the service decorator which are @Injectable for any component need to inject to them constructor to use.\n * providein means where it can be used. 'root' means from root to any submodule.\n */\n/**\n * here is the service class, need to export mark at before.\n */\nexport class FireService {\n  // here will get/send data from firestore\n  // it need a messageDTO to transmit to json file\n  // it also need as array to contain the data read from firestore\n  /**\n   * this is the constrctor which will invoke when the service instance be created.\n   */\n  constructor() {\n    this.message = [];\n    // this is init the firebase connection when the webpage be init\n    this.firebaseApplication = firebase.initializeApp(config.firebaseConfig);\n    // this will get the firebase firestore service.\n    this.firestore = firebase.firestore();\n    // this will get all messages when the webapp init.\n    this.getMessage();\n  }\n  /**\n   * this is the method to send a message to firestore\n   * @param sendThisMessage\n   */\n  sendMessage(sendThisMessage) {\n    // convert a message to messageDTO\n    let messageDTO = {\n      messageContent: sendThisMessage,\n      timestamp: new Date(),\n      user: 'John Duo'\n    };\n    // use the firestore to entry a collection and add a message\n    this.firestore.collection('initCollection')\n    // it will return a collection reference which is a specific path to go the collection\n    .add(messageDTO);\n  }\n  /**\n   * this is a message to get all message from firestore\n   */\n  getMessage() {\n    this.firestore.collection('initCollection').onSnapshot(\n    // onSnapshot is a lisstener which lisening the database\n    // onSnapshot is a lisstener which lisening the database\n    snapshot => {\n      snapshot.docChanges() //it will return the snapshot when last time it be changed\n      .forEach(change => {\n        if (change.type == \"added\") {\n          this.message.push({\n            id: change.doc.id,\n            data: change.doc.data()\n          });\n        }\n        if (change.type == 'modified') {\n          const index = this.message.findIndex(document => document.id != change.doc.id);\n          this.message[index] = {\n            id: change.doc.id,\n            data: change.doc.data()\n          };\n        }\n        if (change.type == 'removed') {\n          this.message = this.message.filter(m => m.id != change.doc.id);\n        }\n      });\n    });\n  }\n}\nFireService.ɵfac = function FireService_Factory(t) {\n  return new (t || FireService)();\n};\nFireService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FireService,\n  factory: FireService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAQA,OAAOA,QAAQ,MAAM,qBAAqB;AAC1C,OAAO,2BAA2B;AAElC,OAAO,KAAKC,MAAM,MAAM,yBAAyB;;AAGjD;;;;AAQA;;;AAGA,OAAM,MAAOC,WAAW;EAKtB;EACA;EACA;EAEA;;;EAGAC;IARA,YAAO,GAAU,EAAE;IASjB;IACA,IAAI,CAACC,mBAAmB,GAAGJ,QAAQ,CAACK,aAAa,CAACJ,MAAM,CAACK,cAAc,CAAC;IACxE;IACA,IAAI,CAACC,SAAS,GAAGP,QAAQ,CAACO,SAAS,EAAE;IAErC;IACA,IAAI,CAACC,UAAU,EAAE;EACnB;EAEA;;;;EAIAC,WAAW,CAACC,eAAoB;IAC9B;IACA,IAAIC,UAAU,GAAe;MAC3BC,cAAc,EAAEF,eAAe;MAC/BG,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,IAAI,EAAE;KACP;IAED;IACA,IAAI,CAACR,SAAS,CAACS,UAAU,CAAC,gBAAgB;IACxC;IAAA,CACCC,GAAG,CAACN,UAAU,CAAC;EACpB;EAEA;;;EAGAH,UAAU;IACR,IAAI,CAACD,SAAS,CAACS,UAAU,CAAC,gBAAgB,CAAC,CACxCE,UAAU;IAAE;IACX;IAAAC,QAAQ,IAAG;MAAGA,QAAQ,CACnBC,UAAU,EAAE,CAAC;MAAA,CACbC,OAAO,CAACC,MAAM,IAAG;QAChB,IAAIA,MAAM,CAACC,IAAI,IAAI,OAAO,EAAE;UAC1B,IAAI,CAACC,OAAO,CACTC,IAAI,CAAC;YAACC,EAAE,EAAEJ,MAAM,CAACK,GAAG,CAACD,EAAE;YAAEE,IAAI,EAAEN,MAAM,CAACK,GAAG,CAACC,IAAI;WAC9C,CAAC;;QAGN,IAAIN,MAAM,CAACC,IAAI,IAAI,UAAU,EAAE;UAC7B,MAAMM,KAAK,GAAG,IAAI,CAACL,OAAO,CAACM,SAAS,CAACC,QAAQ,IAAIA,QAAQ,CAACL,EAAE,IAAIJ,MAAM,CAACK,GAAG,CAACD,EAAE,CAAC;UAC9E,IAAI,CAACF,OAAO,CAACK,KAAK,CAAC,GACjB;YAACH,EAAE,EAAEJ,MAAM,CAACK,GAAG,CAACD,EAAE;YAAEE,IAAI,EAAEN,MAAM,CAACK,GAAG,CAACC,IAAI;UAAE,CAAC;;QAGhD,IAAIN,MAAM,CAACC,IAAI,IAAI,SAAS,EAAE;UAC5B,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACQ,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,EAAE,IAAIJ,MAAM,CAACK,GAAG,CAACD,EAAE,CAAC;;MAEpE,CAAC,CAAC;IACJ,CAAC,CAAC;EACN;;AAlEWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgC,SAAXhC,WAAW;EAAAiC,YANV;AAAM","names":["firebase","config","FireService","constructor","firebaseApplication","initializeApp","firebaseConfig","firestore","getMessage","sendMessage","sendThisMessage","messageDTO","messageContent","timestamp","Date","user","collection","add","onSnapshot","snapshot","docChanges","forEach","change","type","message","push","id","doc","data","index","findIndex","document","filter","m","factory","providedIn"],"sourceRoot":"","sources":["/Users/evens/projectCode/EASV.4thSemester/EASV.4thSemester.Fullstack/fbvideo/frontend/src/app/fire.service.ts"],"sourcesContent":["/**\n * this is the service which can reuse for any component need to call those method it contains.\n */\n/**\n * here import necessary library need to be used.\n */\nimport { Injectable } from '@angular/core';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\n\nimport * as config from '../../firebaseconfig.js';\nimport {MessageDTO} from './messageDTO';\n\n/**\n * here is the service decorator which are @Injectable for any component need to inject to them constructor to use.\n * providein means where it can be used. 'root' means from root to any submodule.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * here is the service class, need to export mark at before.\n */\nexport class FireService {\n  firebaseApplication;\n  firestore: firebase.firestore.Firestore;\n\n  message: any[] = [];\n  // here will get/send data from firestore\n  // it need a messageDTO to transmit to json file\n  // it also need as array to contain the data read from firestore\n\n  /**\n   * this is the constrctor which will invoke when the service instance be created.\n   */\n  constructor() {\n    // this is init the firebase connection when the webpage be init\n    this.firebaseApplication = firebase.initializeApp(config.firebaseConfig);\n    // this will get the firebase firestore service.\n    this.firestore = firebase.firestore();\n\n    // this will get all messages when the webapp init.\n    this.getMessage();\n  }\n\n  /**\n   * this is the method to send a message to firestore\n   * @param sendThisMessage\n   */\n  sendMessage(sendThisMessage: any){\n    // convert a message to messageDTO\n    let messageDTO: MessageDTO = {\n      messageContent: sendThisMessage,\n      timestamp: new Date(),\n      user: 'John Duo'\n    }\n\n    // use the firestore to entry a collection and add a message\n    this.firestore.collection('initCollection')\n      // it will return a collection reference which is a specific path to go the collection\n      .add(messageDTO);\n  }\n\n  /**\n   * this is a message to get all message from firestore\n   */\n  getMessage() {\n    this.firestore.collection('initCollection')\n      .onSnapshot( // onSnapshot is a lisstener which lisening the database\n        snapshot => { snapshot\n          .docChanges() //it will return the snapshot when last time it be changed\n          .forEach(change => {\n            if (change.type == \"added\") {\n              this.message\n                .push({id: change.doc.id, data: change.doc.data()\n                });\n            }\n\n            if (change.type == 'modified') {\n              const index = this.message.findIndex(document => document.id != change.doc.id);\n              this.message[index] =\n                {id: change.doc.id, data: change.doc.data()}\n            }\n\n            if (change.type == 'removed') {\n              this.message = this.message.filter(m => m.id != change.doc.id)\n            }\n        })\n      })\n  }\n\n  // async getMessage() {\n  //   //promise 类型支持异步回调函数的链式调用\n  //   const query =\n  //     // the query will contain the result from a database as snapshot\n  //     await this.firestore\n  //       .collection('initCollection')\n  //       .get();\n  //\n  //   this.message =\n  //     query\n  //     .docs //is the array which the snapshot will form be.\n  //     . map( // map is a js method which can map(or copy) an array to other arry.\n  //       m => {\n  //         m.data(); // data will take the doc snapshot as an object(json format).\n  //       }\n  //     )\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}