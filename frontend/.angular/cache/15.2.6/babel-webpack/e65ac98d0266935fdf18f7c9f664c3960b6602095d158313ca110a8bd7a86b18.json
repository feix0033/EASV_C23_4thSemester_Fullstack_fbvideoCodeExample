{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport * as config from '../../firebaseconfig.js';\nimport * as i0 from \"@angular/core\";\nexport class FireService {\n  // here will get/send data from firestore\n  // it need a messageDTO to transmit to json file\n  // it also need as array to contain the data read from firestore\n  constructor() {\n    this.message = [];\n    this.firebaseApplication = firebase.initializeApp(config.firebaseConfig);\n    this.firestore = firebase.firestore();\n    this.getMessage();\n  }\n  sendMessage(sendThisMessage) {\n    let messageDTO = {\n      messageContent: sendThisMessage,\n      timestamp: new Date(),\n      user: 'John Duo'\n    };\n    this.firestore.collection('initCollection').add(messageDTO);\n  }\n  getMessage() {\n    this.firestore.collection('initCollection').onSnapshot(snapshot => {\n      snapshot.docChanges().forEach(change => {\n        if (change.type == \"added\") {\n          this.message.push({\n            id: change.doc.id,\n            data: change.doc.data()\n          });\n        }\n        if (change.type == 'modified') {\n          const index = this.message.findIndex(document => document.id != change.doc.id);\n          this.message[index] = {\n            id: change.doc.id,\n            data: change.doc.data()\n          };\n        }\n        if (change.type == 'removed') {\n          this.message = this.message.filter(m => m.id != change.doc.id);\n        }\n      });\n    });\n  }\n}\nFireService.ɵfac = function FireService_Factory(t) {\n  return new (t || FireService)();\n};\nFireService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FireService,\n  factory: FireService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,OAAOA,QAAQ,MAAM,qBAAqB;AAC1C,OAAO,2BAA2B;AAElC,OAAO,KAAKC,MAAM,MAAM,yBAAyB;;AAMjD,OAAM,MAAOC,WAAW;EAKtB;EACA;EACA;EAGAC;IANA,YAAO,GAAU,EAAE;IAOjB,IAAI,CAACC,mBAAmB,GAAGJ,QAAQ,CAACK,aAAa,CAACJ,MAAM,CAACK,cAAc,CAAC;IACxE,IAAI,CAACC,SAAS,GAAGP,QAAQ,CAACO,SAAS,EAAE;IAErC,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAC,WAAW,CAACC,eAAoB;IAC9B,IAAIC,UAAU,GAAe;MAC3BC,cAAc,EAAEF,eAAe;MAC/BG,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,IAAI,EAAE;KACP;IAED,IAAI,CAACR,SAAS,CACXS,UAAU,CAAC,gBAAgB,CAAC,CAC5BC,GAAG,CAACN,UAAU,CAAC;EACpB;EAEAH,UAAU;IACR,IAAI,CAACD,SAAS,CACXS,UAAU,CAAC,gBAAgB,CAAC,CAC5BE,UAAU,CAACC,QAAQ,IAAG;MACrBA,QAAQ,CAACC,UAAU,EAAE,CAACC,OAAO,CAACC,MAAM,IAAG;QACrC,IAAIA,MAAM,CAACC,IAAI,IAAI,OAAO,EAAE;UAC1B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;YAACC,EAAE,EAAEJ,MAAM,CAACK,GAAG,CAACD,EAAE;YAAEE,IAAI,EAAEN,MAAM,CAACK,GAAG,CAACC,IAAI;UAAE,CAAC,CAAC;;QAGjE,IAAIN,MAAM,CAACC,IAAI,IAAI,UAAU,EAAE;UAC7B,MAAMM,KAAK,GAAG,IAAI,CAACL,OAAO,CAACM,SAAS,CAACC,QAAQ,IAAIA,QAAQ,CAACL,EAAE,IAAIJ,MAAM,CAACK,GAAG,CAACD,EAAE,CAAC;UAC9E,IAAI,CAACF,OAAO,CAACK,KAAK,CAAC,GACjB;YAACH,EAAE,EAAEJ,MAAM,CAACK,GAAG,CAACD,EAAE;YAAEE,IAAI,EAAEN,MAAM,CAACK,GAAG,CAACC,IAAI;UAAE,CAAC;;QAGhD,IAAIN,MAAM,CAACC,IAAI,IAAI,SAAS,EAAE;UAC5B,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACQ,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,EAAE,IAAIJ,MAAM,CAACK,GAAG,CAACD,EAAE,CAAC;;MAElE,CAAC,CAAC;IACJ,CAAC,CAAC;EACN;;AAjDWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgC,SAAXhC,WAAW;EAAAiC,YAFV;AAAM","names":["firebase","config","FireService","constructor","firebaseApplication","initializeApp","firebaseConfig","firestore","getMessage","sendMessage","sendThisMessage","messageDTO","messageContent","timestamp","Date","user","collection","add","onSnapshot","snapshot","docChanges","forEach","change","type","message","push","id","doc","data","index","findIndex","document","filter","m","factory","providedIn"],"sourceRoot":"","sources":["/Users/evens/projectCode/EASV.4thSemester/EASV.4thSemester.Fullstack/fbvideo/frontend/src/app/fire.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\n\nimport * as config from '../../firebaseconfig.js';\nimport {MessageDTO} from './messageDTO';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FireService {\n  firebaseApplication;\n  firestore: firebase.firestore.Firestore;\n\n  message: any[] = [];\n  // here will get/send data from firestore\n  // it need a messageDTO to transmit to json file\n  // it also need as array to contain the data read from firestore\n\n\n  constructor() {\n    this.firebaseApplication = firebase.initializeApp(config.firebaseConfig);\n    this.firestore = firebase.firestore();\n\n    this.getMessage();\n  }\n\n  sendMessage(sendThisMessage: any){\n    let messageDTO: MessageDTO = {\n      messageContent: sendThisMessage,\n      timestamp: new Date(),\n      user: 'John Duo'\n    }\n\n    this.firestore\n      .collection('initCollection')\n      .add(messageDTO);\n  }\n\n  getMessage() {\n    this.firestore\n      .collection('initCollection')\n      .onSnapshot(snapshot => {\n        snapshot.docChanges().forEach(change => {\n          if (change.type == \"added\") {\n            this.message.push({id: change.doc.id, data: change.doc.data()});\n          }\n\n          if (change.type == 'modified') {\n            const index = this.message.findIndex(document => document.id != change.doc.id);\n            this.message[index] =\n              {id: change.doc.id, data: change.doc.data()}\n          }\n\n          if (change.type == 'removed') {\n            this.message = this.message.filter(m => m.id != change.doc.id)\n          }\n        })\n      })\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}