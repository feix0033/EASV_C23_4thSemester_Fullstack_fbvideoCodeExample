{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport * as config from '../../firebaseconfig.js';\nimport * as i0 from \"@angular/core\";\n/**\n * here is the service decorator which are @Injectable for any component need to inject to them constructor to use.\n * providein means where it can be used. 'root' means from root to any submodule.\n */\n/**\n * here is the service class, need to export mark at before.\n */\nexport let FireService = /*#__PURE__*/(() => {\n  class FireService {\n    // here will get/send data from firestore\n    // it need a messageDTO to transmit to json file\n    // it also need as array to contain the data read from firestore\n    /**\n     * this is the constrctor which will invoke when the service instance be created.\n     */\n    constructor() {\n      this.message = [];\n      // this is init the firebase connection when the webpage be init\n      this.firebaseApplication = firebase.initializeApp(config.firebaseConfig);\n      // this will get the firebase firestore service.\n      this.firestore = firebase.firestore();\n      // this will get all messages when the webapp init.\n      this.getMessage();\n    }\n    /**\n     * this is the method to send a message to firestore\n     * @param sendThisMessage\n     */\n    sendMessage(sendThisMessage) {\n      // convert a message to messageDTO\n      let messageDTO = {\n        messageContent: sendThisMessage,\n        timestamp: new Date(),\n        user: 'John Duo'\n      };\n      // use the firestore to entry a collection and add a message\n      this.firestore.collection('initCollection')\n      // it will return a collection reference which is a specific path to go the collection\n      .add(messageDTO);\n    }\n    /**\n     * this is a message to get all message from firestore\n     */\n    getMessage() {\n      this.firestore.collection('initCollection')\n      // .orderBy((\"timestamp\")) // notice: if we want to use this, then the firebase needs to create an index set.\n      .where(\"user\", \"==\", \"John Duo\").onSnapshot(\n      // onSnapshot is a lisstener which lisening the database\n      // onSnapshot is a lisstener which lisening the database\n      snapshot => {\n        snapshot.docChanges() //it will return the snapshot when last time it be changed\n        .forEach(change => {\n          if (change.type == \"added\") {\n            this.message // it will add the contain into html file message list(an array)\n            .push(\n            // add on record into array\n            {\n              id: change.doc.id,\n              data: change.doc.data() //put data as changed record data\n            });\n          }\n\n          if (change.type == 'modified') {\n            const index = this.message.findIndex(document => document.id != change.doc.id);\n            this.message[index] = {\n              id: change.doc.id,\n              data: change.doc.data()\n            };\n          }\n          if (change.type == 'removed') {\n            this.message = this.message.filter(m => m.id != change.doc.id);\n          }\n        });\n      });\n    }\n  }\n  FireService.ɵfac = function FireService_Factory(t) {\n    return new (t || FireService)();\n  };\n  FireService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FireService,\n    factory: FireService.ɵfac,\n    providedIn: 'root'\n  });\n  return FireService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}